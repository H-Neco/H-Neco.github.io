<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>terragrunt on n's tech blog</title><link>/tags/terragrunt/</link><description>Recent content in terragrunt on n's tech blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 26 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/terragrunt/index.xml" rel="self" type="application/rss+xml"/><item><title>terraformのラッパーterragruntの導入検証を実施してみました</title><link>/posts/terragrunt-1/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/terragrunt-1/</guid><description>導入検証 # 普段terraformを利用しているが、以下の点が不便でした デプロイ毎の影響範囲を少なくするため、Gitリポジトリを細かく分けていた terraformのバージョンアップが大変 コードからリソースの依存関係が読みにくい depends_onで明示出来ない部分でデプロイ順を気にする必要性があった 課題 # 以下2点の検証が済んで無いので導入には至ってない terraformだけではなく、terragruntのバージョンも管理しないといけない。バージョンUP作業が今までとどう変わるのか terragruntの開発が止まったとき、スムーズにterraformコードに戻せるか 技術要素 # terraform terragrunt aws 事前準備 # terragruntとは # Terraformを使用したインフラストラクチャの管理を簡略化するためのツールであるTerraform Wrapperとして知られるオープンソースのツールです。Terraformが提供する機能を拡張して、共通の機能を再利用し、コードの再利用性を高め、モジュールを構成するための柔軟性を提供します。terragruntは、Terraformを使用して複数の環境やアカウントで管理する場合に便利です。
導入 # $ brew install tfenv # terraform（.terraform-versionに記載のバージョンがインストールされます） $ brew install tgenv # terragrunt（.terragrunt-versionに記載のバージョンがインストールされます） フォルダ構成 # 他記事を参考にして作成しました。 この構成のメリットは、環境ごとに異なる変数を指定することができるため、コードの再利用性が高くなります。
$ tree . . ├── README.md ├── docs │ └── graph-dependencies.png ├── envs │ ├── prod │ │ ├── リソースグルーピングA │ │ │ └── terragrunt.hcl │ │ ├── リソースグルーピングB │ │ │ └── terragrunt.</description></item></channel></rss>