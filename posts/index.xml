<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on n's tech blog</title><link>/posts/</link><description>Recent content in Posts on n's tech blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 11 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>AmazonLinux2で作るNATインスタンス(Packer|Ansible)</title><link>/posts/ec2-nat-instance/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>/posts/ec2-nat-instance/</guid><description>やること # amazonLinux2でNATインスタンスを構築する なぜamazonLinux2なのか Lambdaは外部から開始する通信を受け付けられないため、ActiveモードでのFTPはサポートされていません。 ECSはPrivateIPの固定化ができませんでした。 NATPrivateGWと組み合わせることで固定化はできるが、ゲートウェイタイプなので外部から開始する通信を受付できません。 技術要素 # Packer ansible iptable CentOS7(amazonLinux2)では、firewalldというファイアウォール管理システムがデフォルトで採用されていますが、iptablesを導入してNATインスタンスを構築します。 ファイル構成 # $ tree . . ├── ansible.cfg ├── bin │ └── init.sh ├── inventory │ └── hosts ├── packer-template │ └── nat_instance.json ├── playbook │ └── setup.yml └── roles └── iptable └── tasks ├── main.yml └── templates ├── iptables-config.j2 ├── nat_cidr.j2 └── sysctl.conf Packerの実行とテンプレートファイル # 実行コマンド packer build packer-template/nat_instance.json . └── packer-template └── nat_instance.json { &amp;#34;variables&amp;#34;: { &amp;#34;aws_access_key&amp;#34;: &amp;#34;{{env `AWS_ACCESS_KEY`}}&amp;#34;, &amp;#34;aws_secret_key&amp;#34;: &amp;#34;{{env `AWS_SECRET_KEY`}}&amp;#34; }, &amp;#34;builders&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;amazon-ebs&amp;#34;, &amp;#34;access_key&amp;#34;: &amp;#34;{{user `aws_access_key`}}&amp;#34;, &amp;#34;secret_key&amp;#34;: &amp;#34;{{user `aws_secret_key`}}&amp;#34;, &amp;#34;region&amp;#34;: &amp;#34;ap-northeast-1&amp;#34;, &amp;#34;ami_regions&amp;#34;: [ &amp;#34;ap-northeast-1&amp;#34; ], &amp;#34;associate_public_ip_address&amp;#34;: true, &amp;#34;source_ami&amp;#34;: &amp;#34;ami-0a3d21ec6281df8cb&amp;#34;, &amp;#34;instance_type&amp;#34;: &amp;#34;t3.</description></item><item><title>EC2にアタッチされたEBSを永続化する</title><link>/posts/ec2-ebs-delete-on-termination/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>/posts/ec2-ebs-delete-on-termination/</guid><description>やること # 初期設定だとEC2を終了した場合、アタッチされているEBSは削除されてしまいますが、AWSCLIで永続化してみます。 技術要素 # EC2/EBS コマンド # 対象のインスタンスのボリューム情報をタグでフィルターして取得する DeleteOnTerminationがtrueの場合は永続化されていない $ aws ec2 describe-instances --filters &amp;#34;Name=tag:Name,Values=xxxxx-prod-web01&amp;#34; | jq -r .Reservations[0].Instances[0].BlockDeviceMappings [ { &amp;#34;DeviceName&amp;#34;: &amp;#34;/dev/sda1&amp;#34;, &amp;#34;Ebs&amp;#34;: { &amp;#34;AttachTime&amp;#34;: &amp;#34;2023-04-18T04:59:14+00:00&amp;#34;, &amp;#34;DeleteOnTermination&amp;#34;: true, &amp;#34;Status&amp;#34;: &amp;#34;attached&amp;#34;, &amp;#34;VolumeId&amp;#34;: &amp;#34;vol-xxxxxxxxxxxx&amp;#34; } } ] 設定用ファイルを準備する DeleteOnTerminationをfalseと記載する $ vim mapping.json [ { &amp;#34;DeviceName&amp;#34;: &amp;#34;/dev/sda1&amp;#34;, &amp;#34;Ebs&amp;#34;: { &amp;#34;DeleteOnTermination&amp;#34;: false } } ] インスタンスの情報を変更する $ aws ec2 modify-instance-attribute --instance-id &amp;#34;i-xxxxxxxxxxxxxx&amp;#34; --block-device-mappings file://mapping.json 対象のインスタンスのボリューム情報をタグでフィルターして取得する DeleteOnTerminationがfalseになっていることを確認する $ aws ec2 describe-instances --filters &amp;#34;Name=tag:Name,Values=xxxxx-prod-web01&amp;#34; | jq -r .</description></item></channel></rss>