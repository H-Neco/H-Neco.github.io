<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>n's tech blog</title><link>/</link><description>Recent content on n's tech blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 03 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>aws EFS(バーストモード)の注意点・対策の検討(クレジット枯渇)</title><link>/posts/aws-efs/</link><pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate><guid>/posts/aws-efs/</guid><description>技術要素 # EFS aws EFSの2つのモードについて # EFSには、バーストモード（汎用）とプロビジョンドモードが存在します。
バーストモードは、基本的にストレージの使用量に応じてトラフィック量が自動的に調整され、一時的なトラフィックの増加に対応できるようになっています。バーストが可能な帯域幅は、トラフィックの使用状況に応じて増減し、最低105Mbpsのバーストが可能です。ただし、読み書きの秒間リクエスト数に制限があるため、秒間リクエスト数を超える場合は、スループットが低下する可能性があります。
プロビジョンドモードは、ボリュームの帯域幅、最小/最大/バーストのスループットを設定することができるモードです。書き込みスループットを指定することができ、読み込みのスループットは書き込みの3倍となります。プロビジョンドモードでは、トラフィック量に応じた自動スケーリングは行われませんが、スループットの設定により、必要なトラフィック量に対応することができます。
バーストモード（汎用）の注意点と対策 # 注意点１．バーストクレジットについて
バーストモードは、ファイルの読み書きで貯蓄しているクレジットを消費するが、NASに配置しているデータ利用量に応じてクレジットが回復する仕組みです。バーストモードの最低速度は105Mbps(s)です。ただし、バーストクレジットが枯渇すると、スループットのパフォーマンスが著しく低下します。この場合、マウントしているシステムからのファイル参照がタイムアウトする可能性があります。 確認方法 メトリクス名：BurstCreditBalance 最初に2.3Tのクレジットが付与されます バーストクレジットを枯渇させないためには、以下のような対策があります。 大量のデータを配置することでクレジットの回復速度を早めることができます。 プロビジョニングモードに切り替えることで、常に一定のスループットを確保する。 CloudFront等のキャッシュを利用する 注意点2．リクエスト数の上限
バーストモードはリクエスト数の上限があります。 最大 IOPSに上限があり、読み込みであれば35,000、書き込みであれば7000です。 バーストモードでの最大IOPSを超えた場合は、スループットのパフォーマンスが低下します。そのため、高いIOPSが必要な場合は、プロビジョニングモードを検討する必要があります。 確認方法 メトリクス名：PercentIOLimit 検討した結果取った対策 # バーストモードで大量のデータを配置し、クレジットの回復速度を早める方針にする
10GBのファイルを配置してみる 3 USD/月 コマンド $ dd if=/dev/zero of=10GB_file_1 bs=10240k count=1000 確認方法 メトリクス名：BurstCreditBalance プロビジョニングモードは金額が高いため利用しない
Throughput 33(Mib/s) / Max Read Throughput 99(Mib/s) 238 USD/月 Throughput 15(Mib/s) / Max Read Throughput 45(Mib/s) 108 USD/月 Throughput 5(Mib/s) / Max Read Throughput 15(Mib/s) 36 USD/月</description></item><item><title>about</title><link>/about/</link><pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate><guid>/about/</guid><description>はじめに # ブログについて # 記事の内容には万全を期していますが、アウトプットの効率を重視しており、記事にかなりの手抜きがあるかもしれません。それでも、技術分野に興味のある方に有益な情報を提供することを目的に、積極的に投稿しています。
お問い合わせ：こちら
自己紹介 # 経歴要約 # 2016年に新卒入社後、サーバーエンジニアとして運用・保守・構築を約2年間経験した後、Webアプリケーション開発に約2年携わり、開発スキルを伸ばしました。現在は、他の基盤からAWSへの移行や新規インフラ構築・クラウド環境のエンハンス等を行っています。
2016年〜2018年(約2年) サーバーエンジニア 2018年〜2020年(約2年) WEBアプリケーション開発 2020年~ クラウドインフラエンジニア 得意分野 # IaCでのクラウドインフラ構築 クラウドインフラのコスト最適化 チャレンジング分野 # aws DBのテーブル設計や、サーバーサイド分野をもう少し伸ばしたい Skill要約 # Infra Cloud AWS CloudFront、S3、APIGateWay、 Lambda/Lambda@Edge、EC2(AmazonLinux2、 Windows2019,2022)、EFS、LB(NLB/ALB)、ECS(Fargate)、 Athena/QuickSight、DXGW、CloudTrail、SecurityHub、Config、GuardDuty、Organizations、SSO、 AmazonConnect、WAF、IAM管理など GCP 学習中 Docker,Vagrant プログラミング ShellScript,PHP(Laravel,Cakephp),Python,VB(.NET),TypeScript HTML,CSS(Bootstrap) CI/CD GitHub Actions,Bitbucket Pipelines Web Server Nginx,Apache IaC Ansible,Terraform Database MySQL,PostgreSQL,MariaDB,SQLServer,DynamoDB Skill DB # スキルレベル定義
レベル 定義 5 深いレベルでの知識を有しており、コードレベルで理解している。 4 自分で開発可能、トラブルシュートも対応可能、人に教えることも可能。 3 プロダクトでコミットしたことがある or 定常的に開発していたことがある。トラブルシュートもある程度は聞きながら対応可能。 2 プロダクトでコミットしたことがある。定常的には開発していない。 1 プライベートでのみ触れたことがある。 スキルレベル詳細</description></item><item><title>OIDCでのデプロイ備忘録です (git → aws)</title><link>/posts/oidc/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/oidc/</guid><description>やること # OIDCをterraformで構築する github bitbucket OIDCを利用してデプロイする 簡単なgithub actionとbitbucket pipelinesを作成する 技術要素 # oidc aws bitbucket github terraform OIDCとは # OIDC (OpenID Connect) とは、OAuth 2.0 プロトコルを拡張した認証プロトコルの一つで、Webアプリケーションやモバイルアプリケーションなどにおけるユーザー認証を行うための仕組みです。
導入メリット # GitからのデプロイにOIDCを使用することで、Gitを介したデプロイにおけるセキュリティ強化や、トークンの有効期限管理が容易になるなどのメリットがあります。MFA有効化されてないアクセスキーをデプロイに利用するのにはセキュリティーリスクがあります。とはいえ、MFAを有効にしたキーをデプロイに利用するのは、デバイスをどうするか等考慮することが増えて中々面倒です。OIDCであれば、ユーザーが自身のIDプロバイダーの認証情報を使用するため、認証情報の管理が簡素化され、セキュリティも向上します。
導入背景 # 今まではawsにデプロイしたいとき運用が煩雑でした。これだったらCLIじゃなくてマネジメントコンソールからデプロイでも良いかなぁと思えるほど。。
今までのフローはまずキーを取得するところが手間 MFAのトークンをアプリから確認してコマンドを叩く $ aws sts get-session-token --serial-number arn:aws:iam::xxxxxx:mfa/xxxxxx --token-code xxxxxx 取得したキーをエクスポートかGitに登録 セッションに有効期限があるので定期的に実行&amp;hellip; terraformでOIDCを構築 # terraformで構築します github actionを利用する場合と、bitbucket-pipelinesを利用する場合２パターン記載します。 githubの場合 # variable &amp;#34;aws_account_id&amp;#34; {} variable &amp;#34;github_repo_name&amp;#34; {} variable &amp;#34;oidc_token_url&amp;#34; { default = &amp;#34;https://token.actions.githubusercontent.com&amp;#34; } data &amp;#34;tls_certificate&amp;#34; &amp;#34;github_oidc_token&amp;#34; { url = var.oidc_token_url } resource &amp;#34;aws_iam_openid_connect_provider&amp;#34; &amp;#34;github_oidc_provider&amp;#34; { url = var.</description></item><item><title>terraformのラッパーterragruntの導入検証を実施してみました</title><link>/posts/terragrunt-1/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/terragrunt-1/</guid><description>導入検証 # 普段terraformを利用しているが、以下の点が不便でした デプロイ毎の影響範囲を少なくするため、Gitリポジトリを細かく分けていた terraformのバージョンアップが大変 コードからリソースの依存関係が読みにくい depends_onで明示出来ない部分でデプロイ順を気にする必要性があった 課題 # 以下2点の検証が済んで無いので導入には至ってない terraformだけではなく、terragruntのバージョンも管理しないといけない。バージョンUP作業が今までとどう変わるのか terragruntの開発が止まったとき、スムーズにterraformコードに戻せるか 技術要素 # terraform terragrunt aws 事前準備 # terragruntとは # Terraformを使用したインフラストラクチャの管理を簡略化するためのツールであるTerraform Wrapperとして知られるオープンソースのツールです。Terraformが提供する機能を拡張して、共通の機能を再利用し、コードの再利用性を高め、モジュールを構成するための柔軟性を提供します。terragruntは、Terraformを使用して複数の環境やアカウントで管理する場合に便利です。
導入 # $ brew install tfenv # terraform（.terraform-versionに記載のバージョンがインストールされます） $ brew install tgenv # terragrunt（.terragrunt-versionに記載のバージョンがインストールされます） フォルダ構成 # 他記事を参考にして作成しました。 この構成のメリットは、環境ごとに異なる変数を指定することができるため、コードの再利用性が高くなります。
$ tree . . ├── README.md ├── docs │ └── graph-dependencies.png ├── envs │ ├── prod │ │ ├── リソースグルーピングA │ │ │ └── terragrunt.hcl │ │ ├── リソースグルーピングB │ │ │ └── terragrunt.</description></item><item><title>Lambdaローカル開発環境構築メモ( SAM | LocalStack | TypeScript )</title><link>/posts/lambda-local-execution/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/lambda-local-execution/</guid><description>やること # PC買い替えついでにLambdaのローカル実行環境を再構築しました。備忘として残していきます。 技術要素 # Volta Lambda LocalStack TypeScript SAM 事前準備 # Voltaのインストール # VoltaはNode.jsのバージョン管理に特化したツールで、Node.jsのバージョンを切り替える際に、プロジェクトごとに異なるバージョンを使い分けることができるという利点があります。他のバージョン管理ツールと比較しても、Node.jsのバージョンの切り替えが容易で、Node.jsのインストール方法やバージョン管理方法を意識せずに、簡単にNode.jsのバージョンを管理することができるというメリットがあります。また、VoltaはOSやシェルに依存しないため、様々な環境で利用することができます。
$ curl https://get.volta.sh | bash $ echo &amp;#39;export VOLTA_HOME=&amp;#34;$HOME/.volta&amp;#34;&amp;#39; &amp;gt;&amp;gt; .zshrc $ echo &amp;#39;export PATH=&amp;#34;$VOLTA_HOME/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; .zshrc nodeとyarnのインストール # volta list nodeで利用可能なバージョンを確認できます。バージョン指定してインストールする場合は、volta install node@18.15.0のように指定します。
$ volta install node success: installed and set node@18.15.0 (with npm@9.5.0) as default $ volta install yarn success: installed and set yarn@4.0.0-rc.42 as default SAMインストール # macOSなのでコマンドを記載しますが、WindowsOSの方は公式サイトからmisファイルをダウンロードしていくのが良さそうです。
macOS
$ brew tap aws/tap $ brew install aws-sam-cli $ sam --version SAM CLI, version 1.</description></item><item><title>EC2にアタッチされたEBSを永続化する</title><link>/posts/ec2-ebs-delete-on-termination/</link><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/ec2-ebs-delete-on-termination/</guid><description>やること # 初期設定だとEC2を終了した場合、アタッチされているEBSは削除されてしまいますが、AWSCLIで永続化してみます。 技術要素 # EC2/EBS コマンド # 対象のインスタンスのボリューム情報をタグでフィルターして取得する DeleteOnTerminationがtrueの場合は永続化されていない $ aws ec2 describe-instances --filters &amp;#34;Name=tag:Name,Values=xxxxx-prod-web01&amp;#34; | jq -r .Reservations[0].Instances[0].BlockDeviceMappings [ { &amp;#34;DeviceName&amp;#34;: &amp;#34;/dev/sda1&amp;#34;, &amp;#34;Ebs&amp;#34;: { &amp;#34;AttachTime&amp;#34;: &amp;#34;2023-04-18T04:59:14+00:00&amp;#34;, &amp;#34;DeleteOnTermination&amp;#34;: true, &amp;#34;Status&amp;#34;: &amp;#34;attached&amp;#34;, &amp;#34;VolumeId&amp;#34;: &amp;#34;vol-xxxxxxxxxxxx&amp;#34; } } ] 設定用ファイルを準備する DeleteOnTerminationをfalseと記載する $ vim mapping.json [ { &amp;#34;DeviceName&amp;#34;: &amp;#34;/dev/sda1&amp;#34;, &amp;#34;Ebs&amp;#34;: { &amp;#34;DeleteOnTermination&amp;#34;: false } } ] インスタンスの情報を変更する $ aws ec2 modify-instance-attribute --instance-id &amp;#34;i-xxxxxxxxxxxxxx&amp;#34; --block-device-mappings file://mapping.json 対象のインスタンスのボリューム情報をタグでフィルターして取得する DeleteOnTerminationがfalseになっていることを確認する $ aws ec2 describe-instances --filters &amp;#34;Name=tag:Name,Values=xxxxx-prod-web01&amp;#34; | jq -r .</description></item><item><title>AmazonLinux2で作るNATインスタンス(Packer|Ansible)</title><link>/posts/ec2-nat-instance/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/ec2-nat-instance/</guid><description>やること # amazonLinux2でNATインスタンスを構築する なぜamazonLinux2なのか Lambdaは外部から開始する通信を受け付けられないため、ActiveモードでのFTPはサポートされていません。 ECSはPrivateIPの固定化ができませんでした。 NATPrivateGWと組み合わせることで固定化はできるが、ゲートウェイタイプなので外部から開始する通信を受付できません。 技術要素 # Packer ansible iptable CentOS7(amazonLinux2)では、firewalldというファイアウォール管理システムがデフォルトで採用されていますが、iptablesを導入してNATインスタンスを構築します。 ファイル構成 # $ tree . . ├── ansible.cfg ├── bin │ └── init.sh ├── inventory │ └── hosts ├── packer-template │ └── nat_instance.json ├── playbook │ └── setup.yml └── roles └── iptable └── tasks ├── main.yml └── templates ├── iptables-config.j2 ├── nat_cidr.j2 └── sysctl.conf Packerの実行とテンプレートファイル # 実行コマンド packer build packer-template/nat_instance.json . └── packer-template └── nat_instance.json { &amp;#34;variables&amp;#34;: { &amp;#34;aws_access_key&amp;#34;: &amp;#34;{{env `AWS_ACCESS_KEY`}}&amp;#34;, &amp;#34;aws_secret_key&amp;#34;: &amp;#34;{{env `AWS_SECRET_KEY`}}&amp;#34; }, &amp;#34;builders&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;amazon-ebs&amp;#34;, &amp;#34;access_key&amp;#34;: &amp;#34;{{user `aws_access_key`}}&amp;#34;, &amp;#34;secret_key&amp;#34;: &amp;#34;{{user `aws_secret_key`}}&amp;#34;, &amp;#34;region&amp;#34;: &amp;#34;ap-northeast-1&amp;#34;, &amp;#34;ami_regions&amp;#34;: [ &amp;#34;ap-northeast-1&amp;#34; ], &amp;#34;associate_public_ip_address&amp;#34;: true, &amp;#34;source_ami&amp;#34;: &amp;#34;ami-0a3d21ec6281df8cb&amp;#34;, &amp;#34;instance_type&amp;#34;: &amp;#34;t3.</description></item></channel></rss>